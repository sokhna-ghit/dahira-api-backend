<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class CheckRole
{
    /**
     * Handle an incoming request.
     * V√©rifie que l'utilisateur connect√© a bien un des r√¥les permis.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @param  mixed ...$roles  Liste des r√¥les autoris√©s (ex: 'admin', 'membre')
     * @return mixed
     */
    public function handle(Request $request, Closure $next, ...$roles)
    {
        $user = $request->user();

        if (!$user) {
            // Pas connect√© : interdit
            return response()->json(['message' => 'Non authentifi√©'], 401);
        }

        // Charger la relation role si elle n'est pas d√©j√† charg√©e
        if (!$user->relationLoaded('role')) {
            $user->load('role');
        }

        // D√©terminer le r√¥le de l'utilisateur
        $userRole = null;
        if ($user->role && is_object($user->role) && isset($user->role->name)) {
            $userRole = $user->role->name;
        } elseif (isset($user->role) && is_string($user->role)) {
            // Fallback pour l'ancien syst√®me
            $userRole = $user->role;
        }

        \Log::info('üîê CheckRole - Utilisateur: ' . $user->email . ', R√¥le: ' . ($userRole ?? 'NULL') . ', R√¥les autoris√©s: ' . implode(',', $roles));

        if (!$userRole || !in_array($userRole, $roles)) {
            \Log::warning('‚ùå Acc√®s refus√© - R√¥le: ' . ($userRole ?? 'NULL') . ' non autoris√© pour: ' . implode(',', $roles));
            abort(403, 'Vous n\'avez pas le droit d\'acc√©der √† cette ressource.');
        }

        \Log::info('‚úÖ Acc√®s autoris√© pour r√¥le: ' . $userRole);
        // Autoris√©, continue la requ√™te
        return $next($request);
    }
}
